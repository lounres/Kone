"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[250],{2876:(a,e,t)=>{t.d(e,{Z:()=>M});var n=t(7462),s=t(7294),r=t(6010),i=t(2466),m=t(6550),l=t(1980),p=t(7392),o=t(12);function c(a){return function(a){return s.Children.map(a,(a=>{if(!a||(0,s.isValidElement)(a)&&function(a){const{props:e}=a;return!!e&&"object"==typeof e&&"value"in e}(a))return a;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof a.type?a.type:a.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(a).map((a=>{let{props:{value:e,label:t,attributes:n,default:s}}=a;return{value:e,label:t,attributes:n,default:s}}))}function u(a){const{values:e,children:t}=a;return(0,s.useMemo)((()=>{const a=e??c(t);return function(a){const e=(0,p.l)(a,((a,e)=>a.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((a=>a.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(a),a}),[e,t])}function N(a){let{value:e,tabValues:t}=a;return t.some((a=>a.value===e))}function h(a){let{queryString:e=!1,groupId:t}=a;const n=(0,m.k6)(),r=function(a){let{queryString:e=!1,groupId:t}=a;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,l._X)(r),(0,s.useCallback)((a=>{if(!r)return;const e=new URLSearchParams(n.location.search);e.set(r,a),n.replace({...n.location,search:e.toString()})}),[r,n])]}function k(a){const{defaultValue:e,queryString:t=!1,groupId:n}=a,r=u(a),[i,m]=(0,s.useState)((()=>function(a){let{defaultValue:e,tabValues:t}=a;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!N({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((a=>a.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find((a=>a.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:e,tabValues:r}))),[l,p]=h({queryString:t,groupId:n}),[c,k]=function(a){let{groupId:e}=a;const t=function(a){return a?`docusaurus.tab.${a}`:null}(e),[n,r]=(0,o.Nk)(t);return[n,(0,s.useCallback)((a=>{t&&r.set(a)}),[t,r])]}({groupId:n}),d=(()=>{const a=l??c;return N({value:a,tabValues:r})?a:null})();(0,s.useLayoutEffect)((()=>{d&&m(d)}),[d]);return{selectedValue:i,selectValue:(0,s.useCallback)((a=>{if(!N({value:a,tabValues:r}))throw new Error(`Can't select invalid tab value=${a}`);m(a),p(a),k(a)}),[p,k,r]),tabValues:r}}var d=t(2389);const g={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(a){let{className:e,block:t,selectedValue:m,selectValue:l,tabValues:p}=a;const o=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),u=a=>{const e=a.currentTarget,t=o.indexOf(e),n=p[t].value;n!==m&&(c(e),l(n))},N=a=>{let e=null;switch(a.key){case"Enter":u(a);break;case"ArrowRight":{const t=o.indexOf(a.currentTarget)+1;e=o[t]??o[0];break}case"ArrowLeft":{const t=o.indexOf(a.currentTarget)-1;e=o[t]??o[o.length-1];break}}e?.focus()};return s.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},e)},p.map((a=>{let{value:e,label:t,attributes:i}=a;return s.createElement("li",(0,n.Z)({role:"tab",tabIndex:m===e?0:-1,"aria-selected":m===e,key:e,ref:a=>o.push(a),onKeyDown:N,onClick:u},i,{className:(0,r.Z)("tabs__item",g.tabItem,i?.className,{"tabs__item--active":m===e})}),t??e)})))}function f(a){let{lazy:e,children:t,selectedValue:n}=a;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(e){const a=r.find((a=>a.props.value===n));return a?(0,s.cloneElement)(a,{className:"margin-top--md"}):null}return s.createElement("div",{className:"margin-top--md"},r.map(((a,e)=>(0,s.cloneElement)(a,{key:e,hidden:a.props.value!==n}))))}function w(a){const e=k(a);return s.createElement("div",{className:(0,r.Z)("tabs-container",g.tabList)},s.createElement(b,(0,n.Z)({},a,e)),s.createElement(f,(0,n.Z)({},a,e)))}function v(a){const e=(0,d.Z)();return s.createElement(w,(0,n.Z)({key:String(e)},a))}const y={tabItem:"tabItem_Ymn6"};function x(a){let{children:e,hidden:t,className:n}=a;return s.createElement("div",{role:"tabpanel",className:(0,r.Z)(y.tabItem,n),hidden:t},e)}var R=t(7693),I=t(3095);function M(a){let{group:e=I.dH,artifact:t,version:n=I.F}=a;return s.createElement(v,{groupId:"buildSystem"},s.createElement(x,{value:"gradle-kotlin",label:"Gradle Kotlin DSL",default:!0},s.createElement(R.Z,{language:"kotlin",title:"build.gradle.kts",showLineNumbers:!0},`dependencies {\n                        |    // highlight-next-line\n                        |    implementation("${e}:${t}:${n}")\n                        |}`.replaceAll(/ *\|/g,""))),s.createElement(x,{value:"gradle-groovy",label:"Gradle Groovy DSL"},s.createElement(R.Z,{language:"groovy",title:"build.gradle",showLineNumbers:!0},`dependencies {\n                        |    // highlight-next-line\n                        |    implementation '${e}:${t}:${n}'\n                        |}`.replaceAll(/ *\|/g,""))),s.createElement(x,{value:"maven",label:"Maven",default:!0},s.createElement(R.Z,{language:"xml",title:"pom.xml",showLineNumbers:!0},`<dependency>\n                    |    \x3c!-- highlight-start --\x3e\n                    |    <groupId>${e}</groupId>\n                    |    <artifactId>${t}</artifactId>\n                    |    <version>${n}</version>\n                    |    \x3c!-- highlight-end --\x3e\n                    |</dependency>`.replaceAll(/ *\|/g,""))))}},3095:(a,e,t)=>{t.d(e,{$c:()=>r,DW:()=>i,F:()=>s,dH:()=>n});const n="com.lounres",s="0.0.0-dev-1",r="https://lounres.github.io",i="/Kone/"},1105:(a,e,t)=>{t.r(e),t.d(e,{assets:()=>p,contentTitle:()=>m,default:()=>N,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var n=t(7462),s=(t(7294),t(3905)),r=t(2876);const i={title:"Algebraic",sidebar_position:2},m="Kone: Algebraic",l={unversionedId:"kone-main/algebraic",id:"kone-main/algebraic",title:"Algebraic",description:"This module provides the basic concept of working with algebraic structures and their implementations.",source:"@site/docs/kone-main/algebraic.mdx",sourceDirName:"kone-main",slug:"/kone-main/algebraic",permalink:"/Kone/ru/docs/kone-main/algebraic",draft:!1,editUrl:"https://github.com/lounres/Kone/tree/master/docs/docs/kone-main/algebraic.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"Algebraic",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Core",permalink:"/Kone/ru/docs/kone-main/core"},next:{title:"Number Theory",permalink:"/Kone/ru/docs/kone-main/numberTheory"}},p={},o=[{value:"Applying the dependencies",id:"applying-the-dependencies",level:2},{value:"Concept",id:"concept",level:2},{value:"Examples",id:"examples",level:2}],c={toc:o},u="wrapper";function N(a){let{components:e,...t}=a;return(0,s.kt)(u,(0,n.Z)({},c,t,{components:e,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"kone-algebraic"},"Kone: Algebraic"),(0,s.kt)("p",null,"This module provides the basic concept of working with algebraic structures and their implementations."),(0,s.kt)("h2",{id:"applying-the-dependencies"},"Applying the dependencies"),(0,s.kt)(r.Z,{artifact:"kone.algebraic",mdxType:"DependencyTabs"}),(0,s.kt)("h2",{id:"concept"},"Concept"),(0,s.kt)("p",null,"Do you remember what is ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Ring_(mathematics)#Definition"},(0,s.kt)("em",{parentName:"a"},"ring in algebra")),"? It's a tuple ",(0,s.kt)("span",{parentName:"p",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"\u27e8"),(0,s.kt)("mi",{parentName:"mrow"},"R"),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},";"),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mo",{parentName:"msup"},"+"),(0,s.kt)("mn",{parentName:"msup"},"2")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mo",{parentName:"msup"},"\u2212"),(0,s.kt)("mn",{parentName:"msup"},"1")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("msup",{parentName:"mrow"},(0,s.kt)("mo",{parentName:"msup"},"\u22c5"),(0,s.kt)("mn",{parentName:"msup"},"2")),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},";"),(0,s.kt)("mn",{parentName:"mrow"},"0"),(0,s.kt)("mo",{parentName:"mrow",separator:"true"},","),(0,s.kt)("mn",{parentName:"mrow"},"1"),(0,s.kt)("mo",{parentName:"mrow",stretchy:"false"},"\u27e9")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\langle R; +^2, -^1, \\cdot^2; 0, 1 \\rangle")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"1.0641em",verticalAlign:"-0.25em"}}),(0,s.kt)("span",{parentName:"span",className:"mopen"},"\u27e8"),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"),(0,s.kt)("span",{parentName:"span",className:"mpunct"},";"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mbin"},"+"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u2212"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"1")))))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},(0,s.kt)("span",{parentName:"span",className:"mbin"},"\u22c5"),(0,s.kt)("span",{parentName:"span",className:"msupsub"},(0,s.kt)("span",{parentName:"span",className:"vlist-t"},(0,s.kt)("span",{parentName:"span",className:"vlist-r"},(0,s.kt)("span",{parentName:"span",className:"vlist",style:{height:"0.8141em"}},(0,s.kt)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},(0,s.kt)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),(0,s.kt)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},(0,s.kt)("span",{parentName:"span",className:"mord mtight"},"2")))))))),(0,s.kt)("span",{parentName:"span",className:"mpunct"},";"),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0"),(0,s.kt)("span",{parentName:"span",className:"mpunct"},","),(0,s.kt)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.1667em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1"),(0,s.kt)("span",{parentName:"span",className:"mclose"},"\u27e9")))))," satisfying ring axioms. In detail, it's"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},"some set ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"R")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"R")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"))))),', which elements we call "elements" or "numbers" of the ring, and we work with,'),(0,s.kt)("li",{parentName:"ol"},"binary operations ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},"+")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"+")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"+")))))," and ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},"\u22c5")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\cdot")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.4445em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u22c5")))))," on ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"R")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"R")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"))))),' that we call "addition" and "multiplication" respectively,'),(0,s.kt)("li",{parentName:"ol"},"unary operation ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mo",{parentName:"mrow"},"\u2212")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"-")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6667em",verticalAlign:"-0.0833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"\u2212")))))," on ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"R")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"R")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"))))),' that we call "additive inversion" or "getting opposite element", and'),(0,s.kt)("li",{parentName:"ol"},"constants ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"0")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"0")))))," and ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mn",{parentName:"mrow"},"1")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"1")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6444em"}}),(0,s.kt)("span",{parentName:"span",className:"mord"},"1")))))," from ",(0,s.kt)("span",{parentName:"li",className:"math math-inline"},(0,s.kt)("span",{parentName:"span",className:"katex"},(0,s.kt)("span",{parentName:"span",className:"katex-mathml"},(0,s.kt)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},(0,s.kt)("semantics",{parentName:"math"},(0,s.kt)("mrow",{parentName:"semantics"},(0,s.kt)("mi",{parentName:"mrow"},"R")),(0,s.kt)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"R")))),(0,s.kt)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},(0,s.kt)("span",{parentName:"span",className:"base"},(0,s.kt)("span",{parentName:"span",className:"strut",style:{height:"0.6833em"}}),(0,s.kt)("span",{parentName:"span",className:"mord mathnormal",style:{marginRight:"0.00773em"}},"R"))))),' that we call "additive identity" and "multiplicative identity" respectively or "zero" and "unit" respectively')),(0,s.kt)("p",null,"that satisfies some axioms that ",(0,s.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Ring_(mathematics)#Definition"},"you can find in Wikipedia"),'. But note that in real life we also always use "subtraction" operation. But if you think about more programmatic approach, then you\'ll find out you forgot to name equality predicate, and also you will need conversion of integers to your ring elements and also duplications of algebraic operations with some parameters substituted with integers.'),(0,s.kt)("p",null,"So in Kone any ring is implemented as an object that holds all the operation of the ring, so it can be used as an algebraic context. For example, there ",(0,s.kt)("inlineCode",{parentName:"p"},"kone.numberTheory")," provides class of Rational numbers and field context for them:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"// Simplified definition. See actual API in API reference\ndata class Rational(val numerator: Long, val denumerator: Long)\n\npublic object RationalField : Field<Rational> /* Field is an extension interface of Ring */ {\n    // Constants of the field\n    public override val zero: Rational = Rational(0L)\n    public override val one: Rational = Rational(1L)\n\n    // The context's equality checkers\n    public override infix fun Rational.equalsTo(other: Rational): Boolean = this == other\n    public override fun Rational.isZero(): Boolean = numerator == 0L\n    public override fun Rational.isOne(): Boolean = numerator == 1L && denominator == 1L\n\n    // Integers conversion\n    public override fun valueOf(arg: Int): Rational = Rational(arg.toLong())\n    public override fun valueOf(arg: Long): Rational = Rational(arg)\n\n    // Main algebraic operations of the ring\n    public override operator fun Rational.unaryMinus(): Rational = ...\n    public override operator fun Rational.plus(other: Rational): Rational = ...\n    public override operator fun Rational.minus(other: Rational): Rational = ...\n    public override operator fun Rational.times(other: Rational): Rational = ...\n    // It's an operation from Field interface\n    public override operator fun Rational.div(other: Rational): Rational = ...\n\n    // And copies of the operation with the second argument as Int\n    public override operator fun Rational.plus(other: Int): Rational = ...\n    public override operator fun Rational.minus(other: Int): Rational = ...\n    public override operator fun Rational.times(other: Int): Rational = ...\n    // It's an operation from Field interface\n    public override operator fun Rational.div(other: Int): Rational = ...\n\n    // There are also similar operations but with Long instead of Int and/or\n    // the first argument to be substituted instead of the first\n\n    // Also some operations comes from Ring/Field interface as derived from the operations above\n}\n")),(0,s.kt)("h2",{id:"examples"},"Examples"),(0,s.kt)("p",null,"Here is an example of standard way to use context of rational numbers:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-kotlin",metastring:"showLineNumbers",showLineNumbers:!0},"import com.lounres.kone.algebraic.*\nimport com.lounres.kone.numberTheory.*\n\n// highlight-start\nRational.field /* It's another reference to RationalField */ {\n    val a = Rational(1, 2)\n    val b = Rational(1, 3)\n\n    // Operations with Rationals\n    println(+a)\n//  >>> 1/2\n    println(-b)\n//  >>> -1/3\n    println(a + b)\n//  >>> 5/6\n    println(a - b)\n//  >>> 1/6\n    println(a * b)\n//  >>> 1/6\n    println(a / b)\n//  >>> 3/2\n\n    // Operations with Rationals and integers\n    println(b - 1)\n//  >>> -2/3\n    println(34 * a)\n//  >>> 17\n\n    // Operations with only integers are not supported! Kotlin built-in operations are used\n    println((5 * 7)::class.simpleName)\n//  >>> Int\n\n    // Context equality checkers does not support default Kotlin `equals` operator.\n    // Instead, there are `equalsTo`, `notEqualsTo`, `eq`, `neq` infix operations.\n    println(a equalsTo b)\n//  >>> false\n    println(a * 2 eq b * 3)\n//  >>> true\n    println(a * b neq b * a)\n//  >>> false\n\n    // Also, there are other equality checkers and operations defined in Ring and Field interfaces.\n    // See API reference for the details.\n}\n// highlight-end\n\n// highlight-start\n// Contexts can also be used to return result of computation inside them\nfun bernoulliNumber(n: Int): Rational = Rational.field {\n    // Initialise a list for storing the recursively computed Bernoulli numbers\n    val bernoulliNumbers = Array<Rational?>(n + 1) { null }\n    bernoulliNumbers[0] = one\n\n    // Compute the numbers with recurrent formula\n    for (i in 1..n) bernoulliNumbers[i] =\n        (1..i)\n            .map { k -> binomial(i + 1, k + 1) * bernoulliNumbers[i - k]!! }\n            .reduce { acc, r -> acc + r } / -(i + 1)\n\n    // Return result\n    bernoulliNumbers[n]!!\n}\nprintln(bernoulliNumber(14))\n// >>> 7/6\n// highlight-end\n")))}N.isMDXComponent=!0}}]);